@using InfoSupport.StaticCodeAnalyzer.Domain

<div class="flex w-full h-full overflow-hidden">
    <div class="w-2/5 h-full relative overflow-auto">
        <div class="form-control">
            <label class="label cursor-pointer">
                <span class="label-text">Filter on files</span>
                <input type="checkbox" class="toggle" @bind="IsFilteringFiles" />
            </label>
        </div>
        <ul>
            <li>
                <button class="btn btn-block mb-1 p-1" @onclick="OnDirectoryLeave">
                    <p class="text-left w-full">..</p>
                </button>
            </li>
            @foreach (var path in _currentDirectoryPaths)
            {
                <li>
                    @if (path.EndsWith(".cs"))
                    {
                        @if (IsFileSelected(path))
                        {
                            <button class="btn btn-block mb-1 p-1 btn-neutral" @onclick="() => OnPathEnter(path)">
                                <p class="text-left w-full text-wrap break-all">@path</p>
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-block mb-1 p-1 btn-accent" @onclick="() => OnPathEnter(path)">
                                <p class="text-left w-full text-wrap break-all">@path</p>
                            </button>
                        }

                }
                    else
                    {
                        <button class="btn btn-block mb-1 p-1" @onclick="() => OnPathEnter(path)">
                            <p class="text-left w-full text-wrap break-all">@path</p>
                        </button>
                    }
                </li>
                
            }
        </ul>
        
    </div>
    <div class="divider divider-horizontal"></div>
    <div class="w-2/5 h-full relative overflow-auto">
        <ul>
            @for (int i = 0; i < 100; i++)
            {
                <li>
                    <p>Item @(i + 1)</p>
                </li>
            }
        </ul>
    </div>
</div>

@code {
    [Parameter]
    public Report? Report { get; set; } = default;

    [Parameter]
    public Project? Project { get; set; } = default;

    private string _currentFile = string.Empty;

    private bool IsFilteringFiles { get; set; } = false;

    private string _currentDirectory = string.Empty;
    private List<string> _projectFilePaths => Report?.ProjectFiles.Select(f => f.Path).ToList() ?? [];

    private List<string> _currentDirectoryPaths => _projectFilePaths
        .Select(f => f.Replace('\\', '/'))
        .Where(f => f.StartsWith(_currentDirectory))
        .Select(f => f.Substring(_currentDirectory.Length + 1))
        .Select(f => f.Split("/").FirstOrDefault())
        .Where(f => f is not null)
        .Cast<string>()
        .Distinct()
        .Where(f => !f.EndsWith(".cs") || IsFilteringFiles)
        .ToList();

    protected override void OnInitialized()
    {
        _currentDirectory = Project?.Path.Replace('\\', '/') ?? "";
    }

    private void DebugLogList<T>(List<T> list)
    {
        Console.WriteLine($"[{string.Join(", ", list)}]");
    }

    private void OnPathEnter(string name)
    {
        var isFile = name.EndsWith(".cs");

        if (isFile)
        {
            string newFile = $"{_currentDirectory}/{name}";

            if (newFile == _currentFile)
            {
                _currentFile = string.Empty;
            }
            else
            {
                _currentFile = newFile;
            }
        }
        else
        {
            _currentDirectory += $"/{name}";
        }
    }

    private bool IsFileSelected(string name)
    {
        return IsFilteringFiles && _currentFile == $"{_currentDirectory}/{name}";
    }

    private void OnDirectoryLeave()
    {
        var lastIndex = _currentDirectory.LastIndexOf('/');

        if (lastIndex != -1)
        {
            _currentDirectory = _currentDirectory[..lastIndex];
        }
    }

    private string GetFileName(string input)
    {
        var lastIndex = input.Replace('\\', '/').LastIndexOf('/');

        return lastIndex != -1 ? input[(lastIndex + 1)..] : input;
    }
}
