@page "/project/{Id:guid}"

@using InfoSupport.StaticCodeAnalyzer.Domain
@using InfoSupport.StaticCodeAnalyzer.WebApp.Components
@using InfoSupport.StaticCodeAnalyzer.WebApp.Services

@inject HttpClient HttpClient;
@inject NavigationManager NavigationManager;
@inject NavBarStateService NavBarState;
@inject IJSRuntime JSRuntime

<dialog id="config_created_modal" class="modal">
    <div class="modal-box">
        <h3 class="font-bold text-lg">@ConfigModalTitle</h3>
        <p>@ConfigModalDescription</p>
        <div class="modal-action">
            <button type="button" class="btn" onclick="document.getElementById('config_created_modal').close()">Ok</button>
        </div>
    </div>
</dialog>

<script>
    function closeModal(modalId) {
        var modal = document.getElementById(modalId);
        if (modal) {
            modal.close();
        }
    }

    function showModal(modalId) {
        var modal = document.getElementById(modalId);
        if (modal) {
            modal.show();
        }
    }
</script>

@if (UserProject is null)
{
    <LoadingSpinner LoadingText="Loading project..">

    </LoadingSpinner>
}
else
{
    <div class="ml-8 join join-vertical lg:join-horizontal">
        <button class="btn join-item" @onclick="Analyze">Analyze</button>
        <button class="btn join-item" @onclick="CreateConfig">Create config</button>
        <button class="btn join-item" @onclick="EditConfig">Edit config</button>
    </div>

    <div class="grid grid-cols-4 gap-4 p-8">
        @foreach (var report in UserProject.Reports)
        {
            <div class="card bg-base-100 shadow-xl">
                <div class="card-body">
                    <h2 class="card-title">Report @@ @report.RunAt</h2>
                    <div class="card-actions justify-end">
                        <button class="btn" @onclick="() => ViewReport(report)">View</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (IsRunningAnalysis)
{
    <LoadingSpinner LoadingText="Analyzing project..">

    </LoadingSpinner>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    public Project? UserProject { get; set; } = null;
    public bool IsRunningAnalysis { get; set; } = false;

    public string ConfigModalTitle { get; set; } = string.Empty;
    public string ConfigModalDescription { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        NavBarState.PageTitle = $"Project {UserProject?.Name ?? "Invalid"}";
        NavBarState.TitleRedirect = $"/project/{Id}";
        await InvokeAsync(StateHasChanged);

        try
        {
            UserProject = await HttpClient.GetFromJsonAsync<Project>($"project/{Id}");
            UserProject?.Reports.Reverse();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    public void ViewReport(Report report)
    {
        NavigationManager.NavigateTo($"/project/{Id}/report/{report.Id}");
    }

    public async void Analyze()
    {
        IsRunningAnalysis = true;
        StateHasChanged();

        await HttpClient.PostAsync($"project/{Id}/analyze", null);

        // Refresh reports
        UserProject = await HttpClient.GetFromJsonAsync<Project>($"project/{Id}");
        UserProject?.Reports.Reverse();

        IsRunningAnalysis = false;
        StateHasChanged();
    }

    public async void CreateConfig()
    {
        var response = await HttpClient.PostAsync($"project/{Id}/config", null);

        if (response.IsSuccessStatusCode)
        {
            ConfigModalTitle = "Config created!";
            ConfigModalDescription = await response.Content.ReadAsStringAsync();
        }
        else
        {
            ConfigModalTitle = "Failed!";
            ConfigModalDescription = "Failed to create config! Please try again later or report a bug";
        }

        await JSRuntime.InvokeVoidAsync("showModal", "config_created_modal");
        await InvokeAsync(StateHasChanged);
    }

    public async void EditConfig()
    {
        var response = await HttpClient.PostAsync($"project/{Id}/config/open", null);

        if (!response.IsSuccessStatusCode)
        {
            ConfigModalTitle = "Failed!";
            ConfigModalDescription = "Failed to open config for editing! Does it exist?";

            await JSRuntime.InvokeVoidAsync("showModal", "config_created_modal");
            await InvokeAsync(StateHasChanged);
        }
    }
}
